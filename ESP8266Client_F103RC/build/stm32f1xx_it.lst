ARM GAS  /tmp/ccJG0Gnm.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"stm32f1xx_it.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.NMI_Handler,"ax",%progbits
  20              		.align	2
  21              		.global	NMI_Handler
  22              		.thumb
  23              		.thumb_func
  25              	NMI_Handler:
  26              	.LFB69:
  27              		.file 1 "Src/stm32f1xx_it.c"
   1:Src/stm32f1xx_it.c **** /**
   2:Src/stm32f1xx_it.c ****   ******************************************************************************
   3:Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   4:Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   5:Src/stm32f1xx_it.c ****   ******************************************************************************
   6:Src/stm32f1xx_it.c ****   *
   7:Src/stm32f1xx_it.c ****   * COPYRIGHT(c) 2020 STMicroelectronics
   8:Src/stm32f1xx_it.c ****   *
   9:Src/stm32f1xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  10:Src/stm32f1xx_it.c ****   * are permitted provided that the following conditions are met:
  11:Src/stm32f1xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  12:Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer.
  13:Src/stm32f1xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  14:Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  15:Src/stm32f1xx_it.c ****   *      and/or other materials provided with the distribution.
  16:Src/stm32f1xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  17:Src/stm32f1xx_it.c ****   *      may be used to endorse or promote products derived from this software
  18:Src/stm32f1xx_it.c ****   *      without specific prior written permission.
  19:Src/stm32f1xx_it.c ****   *
  20:Src/stm32f1xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:Src/stm32f1xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:Src/stm32f1xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:Src/stm32f1xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  24:Src/stm32f1xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  25:Src/stm32f1xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  26:Src/stm32f1xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  27:Src/stm32f1xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  28:Src/stm32f1xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  29:Src/stm32f1xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:Src/stm32f1xx_it.c ****   *
  31:Src/stm32f1xx_it.c ****   ******************************************************************************
ARM GAS  /tmp/ccJG0Gnm.s 			page 2


  32:Src/stm32f1xx_it.c ****   */
  33:Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
  34:Src/stm32f1xx_it.c **** #include "stm32f1xx_hal.h"
  35:Src/stm32f1xx_it.c **** #include "stm32f1xx.h"
  36:Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  37:Src/stm32f1xx_it.c **** #include "cmsis_os.h"
  38:Src/stm32f1xx_it.c **** 
  39:Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  40:Src/stm32f1xx_it.c **** #define BUFFERSIZE 255
  41:Src/stm32f1xx_it.c **** extern uint8_t recv_end_flag,recv_end_flag_uart1,Rx_len,bootfirst;
  42:Src/stm32f1xx_it.c **** extern uint8_t recv_end_flag_uart1,Rx_len_uart1,bootfirst_uart1;
  43:Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  44:Src/stm32f1xx_it.c **** 
  45:Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  46:Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart1_rx;
  47:Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart2_rx;
  48:Src/stm32f1xx_it.c **** extern UART_HandleTypeDef huart1;
  49:Src/stm32f1xx_it.c **** extern UART_HandleTypeDef huart2;
  50:Src/stm32f1xx_it.c **** extern UART_HandleTypeDef huart3;
  51:Src/stm32f1xx_it.c **** 
  52:Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim4;
  53:Src/stm32f1xx_it.c **** 
  54:Src/stm32f1xx_it.c **** /******************************************************************************/
  55:Src/stm32f1xx_it.c **** /*            Cortex-M3 Processor Interruption and Exception Handlers         */ 
  56:Src/stm32f1xx_it.c **** /******************************************************************************/
  57:Src/stm32f1xx_it.c **** 
  58:Src/stm32f1xx_it.c **** /**
  59:Src/stm32f1xx_it.c **** * @brief This function handles Non maskable interrupt.
  60:Src/stm32f1xx_it.c **** */
  61:Src/stm32f1xx_it.c **** void NMI_Handler(void)
  62:Src/stm32f1xx_it.c **** {
  28              		.loc 1 62 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE69:
  37 0002 00BF     		.section	.text.HardFault_Handler,"ax",%progbits
  38              		.align	2
  39              		.global	HardFault_Handler
  40              		.thumb
  41              		.thumb_func
  43              	HardFault_Handler:
  44              	.LFB70:
  63:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  64:Src/stm32f1xx_it.c **** 
  65:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  66:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  67:Src/stm32f1xx_it.c **** 
  68:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  69:Src/stm32f1xx_it.c **** }
  70:Src/stm32f1xx_it.c **** 
  71:Src/stm32f1xx_it.c **** /**
  72:Src/stm32f1xx_it.c **** * @brief This function handles Hard fault interrupt.
  73:Src/stm32f1xx_it.c **** */
ARM GAS  /tmp/ccJG0Gnm.s 			page 3


  74:Src/stm32f1xx_it.c **** void HardFault_Handler(void)
  75:Src/stm32f1xx_it.c **** {
  45              		.loc 1 75 0
  46              		.cfi_startproc
  47              		@ Volatile: function does not return.
  48              		@ args = 0, pretend = 0, frame = 0
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50              		@ link register save eliminated.
  51              	.L3:
  52 0000 FEE7     		b	.L3
  53              		.cfi_endproc
  54              	.LFE70:
  56 0002 00BF     		.section	.text.MemManage_Handler,"ax",%progbits
  57              		.align	2
  58              		.global	MemManage_Handler
  59              		.thumb
  60              		.thumb_func
  62              	MemManage_Handler:
  63              	.LFB71:
  76:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  77:Src/stm32f1xx_it.c **** 
  78:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  79:Src/stm32f1xx_it.c ****   while (1)
  80:Src/stm32f1xx_it.c ****   {
  81:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  82:Src/stm32f1xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  83:Src/stm32f1xx_it.c ****   }
  84:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 1 */
  85:Src/stm32f1xx_it.c **** 
  86:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 1 */
  87:Src/stm32f1xx_it.c **** }
  88:Src/stm32f1xx_it.c **** 
  89:Src/stm32f1xx_it.c **** /**
  90:Src/stm32f1xx_it.c **** * @brief This function handles Memory management fault.
  91:Src/stm32f1xx_it.c **** */
  92:Src/stm32f1xx_it.c **** void MemManage_Handler(void)
  93:Src/stm32f1xx_it.c **** {
  64              		.loc 1 93 0
  65              		.cfi_startproc
  66              		@ Volatile: function does not return.
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69              		@ link register save eliminated.
  70              	.L5:
  71 0000 FEE7     		b	.L5
  72              		.cfi_endproc
  73              	.LFE71:
  75 0002 00BF     		.section	.text.BusFault_Handler,"ax",%progbits
  76              		.align	2
  77              		.global	BusFault_Handler
  78              		.thumb
  79              		.thumb_func
  81              	BusFault_Handler:
  82              	.LFB72:
  94:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  95:Src/stm32f1xx_it.c **** 
  96:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
ARM GAS  /tmp/ccJG0Gnm.s 			page 4


  97:Src/stm32f1xx_it.c ****   while (1)
  98:Src/stm32f1xx_it.c ****   {
  99:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 100:Src/stm32f1xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 101:Src/stm32f1xx_it.c ****   }
 102:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 1 */
 103:Src/stm32f1xx_it.c **** 
 104:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 1 */
 105:Src/stm32f1xx_it.c **** }
 106:Src/stm32f1xx_it.c **** 
 107:Src/stm32f1xx_it.c **** /**
 108:Src/stm32f1xx_it.c **** * @brief This function handles Prefetch fault, memory access fault.
 109:Src/stm32f1xx_it.c **** */
 110:Src/stm32f1xx_it.c **** void BusFault_Handler(void)
 111:Src/stm32f1xx_it.c **** {
  83              		.loc 1 111 0
  84              		.cfi_startproc
  85              		@ Volatile: function does not return.
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              		@ link register save eliminated.
  89              	.L7:
  90 0000 FEE7     		b	.L7
  91              		.cfi_endproc
  92              	.LFE72:
  94 0002 00BF     		.section	.text.UsageFault_Handler,"ax",%progbits
  95              		.align	2
  96              		.global	UsageFault_Handler
  97              		.thumb
  98              		.thumb_func
 100              	UsageFault_Handler:
 101              	.LFB73:
 112:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 113:Src/stm32f1xx_it.c **** 
 114:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 115:Src/stm32f1xx_it.c ****   while (1)
 116:Src/stm32f1xx_it.c ****   {
 117:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 118:Src/stm32f1xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 119:Src/stm32f1xx_it.c ****   }
 120:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 1 */
 121:Src/stm32f1xx_it.c **** 
 122:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 1 */
 123:Src/stm32f1xx_it.c **** }
 124:Src/stm32f1xx_it.c **** 
 125:Src/stm32f1xx_it.c **** /**
 126:Src/stm32f1xx_it.c **** * @brief This function handles Undefined instruction or illegal state.
 127:Src/stm32f1xx_it.c **** */
 128:Src/stm32f1xx_it.c **** void UsageFault_Handler(void)
 129:Src/stm32f1xx_it.c **** {
 102              		.loc 1 129 0
 103              		.cfi_startproc
 104              		@ Volatile: function does not return.
 105              		@ args = 0, pretend = 0, frame = 0
 106              		@ frame_needed = 0, uses_anonymous_args = 0
 107              		@ link register save eliminated.
 108              	.L9:
ARM GAS  /tmp/ccJG0Gnm.s 			page 5


 109 0000 FEE7     		b	.L9
 110              		.cfi_endproc
 111              	.LFE73:
 113 0002 00BF     		.section	.text.DebugMon_Handler,"ax",%progbits
 114              		.align	2
 115              		.global	DebugMon_Handler
 116              		.thumb
 117              		.thumb_func
 119              	DebugMon_Handler:
 120              	.LFB74:
 130:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 131:Src/stm32f1xx_it.c **** 
 132:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 133:Src/stm32f1xx_it.c ****   while (1)
 134:Src/stm32f1xx_it.c ****   {
 135:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 136:Src/stm32f1xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 137:Src/stm32f1xx_it.c ****   }
 138:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 1 */
 139:Src/stm32f1xx_it.c **** 
 140:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 1 */
 141:Src/stm32f1xx_it.c **** }
 142:Src/stm32f1xx_it.c **** 
 143:Src/stm32f1xx_it.c **** /**
 144:Src/stm32f1xx_it.c **** * @brief This function handles Debug monitor.
 145:Src/stm32f1xx_it.c **** */
 146:Src/stm32f1xx_it.c **** void DebugMon_Handler(void)
 147:Src/stm32f1xx_it.c **** {
 121              		.loc 1 147 0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 0, uses_anonymous_args = 0
 125              		@ link register save eliminated.
 126 0000 7047     		bx	lr
 127              		.cfi_endproc
 128              	.LFE74:
 130 0002 00BF     		.section	.text.SysTick_Handler,"ax",%progbits
 131              		.align	2
 132              		.global	SysTick_Handler
 133              		.thumb
 134              		.thumb_func
 136              	SysTick_Handler:
 137              	.LFB75:
 148:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 149:Src/stm32f1xx_it.c **** 
 150:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 151:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 152:Src/stm32f1xx_it.c **** 
 153:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 154:Src/stm32f1xx_it.c **** }
 155:Src/stm32f1xx_it.c **** 
 156:Src/stm32f1xx_it.c **** /**
 157:Src/stm32f1xx_it.c **** * @brief This function handles System tick timer.
 158:Src/stm32f1xx_it.c **** */
 159:Src/stm32f1xx_it.c **** void SysTick_Handler(void)
 160:Src/stm32f1xx_it.c **** {
 138              		.loc 1 160 0
ARM GAS  /tmp/ccJG0Gnm.s 			page 6


 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142              		.loc 1 160 0
 143 0000 08B5     		push	{r3, lr}
 144              	.LCFI0:
 145              		.cfi_def_cfa_offset 8
 146              		.cfi_offset 3, -8
 147              		.cfi_offset 14, -4
 161:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 162:Src/stm32f1xx_it.c **** 
 163:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 164:Src/stm32f1xx_it.c ****   osSystickHandler();
 148              		.loc 1 164 0
 149 0002 FFF7FEFF 		bl	osSystickHandler
 150              	.LVL0:
 151 0006 08BD     		pop	{r3, pc}
 152              		.cfi_endproc
 153              	.LFE75:
 155              		.section	.text.DMA1_Channel5_IRQHandler,"ax",%progbits
 156              		.align	2
 157              		.global	DMA1_Channel5_IRQHandler
 158              		.thumb
 159              		.thumb_func
 161              	DMA1_Channel5_IRQHandler:
 162              	.LFB76:
 165:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 166:Src/stm32f1xx_it.c **** 
 167:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 168:Src/stm32f1xx_it.c **** }
 169:Src/stm32f1xx_it.c **** 
 170:Src/stm32f1xx_it.c **** /******************************************************************************/
 171:Src/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 172:Src/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 173:Src/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 174:Src/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 175:Src/stm32f1xx_it.c **** /******************************************************************************/
 176:Src/stm32f1xx_it.c **** 
 177:Src/stm32f1xx_it.c **** /**
 178:Src/stm32f1xx_it.c **** * @brief This function handles DMA1 channel5 global interrupt.
 179:Src/stm32f1xx_it.c **** */
 180:Src/stm32f1xx_it.c **** void DMA1_Channel5_IRQHandler(void)
 181:Src/stm32f1xx_it.c **** {
 163              		.loc 1 181 0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167 0000 08B5     		push	{r3, lr}
 168              	.LCFI1:
 169              		.cfi_def_cfa_offset 8
 170              		.cfi_offset 3, -8
 171              		.cfi_offset 14, -4
 182:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
 183:Src/stm32f1xx_it.c **** 
 184:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 0 */
 185:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart1_rx);
 172              		.loc 1 185 0
ARM GAS  /tmp/ccJG0Gnm.s 			page 7


 173 0002 0248     		ldr	r0, .L15
 174 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 175              	.LVL1:
 176 0008 08BD     		pop	{r3, pc}
 177              	.L16:
 178 000a 00BF     		.align	2
 179              	.L15:
 180 000c 00000000 		.word	hdma_usart1_rx
 181              		.cfi_endproc
 182              	.LFE76:
 184              		.section	.text.DMA1_Channel6_IRQHandler,"ax",%progbits
 185              		.align	2
 186              		.global	DMA1_Channel6_IRQHandler
 187              		.thumb
 188              		.thumb_func
 190              	DMA1_Channel6_IRQHandler:
 191              	.LFB77:
 186:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
 187:Src/stm32f1xx_it.c **** 
 188:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 1 */
 189:Src/stm32f1xx_it.c **** }
 190:Src/stm32f1xx_it.c **** 
 191:Src/stm32f1xx_it.c **** /**
 192:Src/stm32f1xx_it.c **** * @brief This function handles DMA1 channel6 global interrupt.
 193:Src/stm32f1xx_it.c **** */
 194:Src/stm32f1xx_it.c **** void DMA1_Channel6_IRQHandler(void)
 195:Src/stm32f1xx_it.c **** {
 192              		.loc 1 195 0
 193              		.cfi_startproc
 194              		@ args = 0, pretend = 0, frame = 0
 195              		@ frame_needed = 0, uses_anonymous_args = 0
 196 0000 08B5     		push	{r3, lr}
 197              	.LCFI2:
 198              		.cfi_def_cfa_offset 8
 199              		.cfi_offset 3, -8
 200              		.cfi_offset 14, -4
 196:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
 197:Src/stm32f1xx_it.c **** 
 198:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel6_IRQn 0 */
 199:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart2_rx);
 201              		.loc 1 199 0
 202 0002 0248     		ldr	r0, .L19
 203 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 204              	.LVL2:
 205 0008 08BD     		pop	{r3, pc}
 206              	.L20:
 207 000a 00BF     		.align	2
 208              	.L19:
 209 000c 00000000 		.word	hdma_usart2_rx
 210              		.cfi_endproc
 211              	.LFE77:
 213              		.section	.text.TIM4_IRQHandler,"ax",%progbits
 214              		.align	2
 215              		.global	TIM4_IRQHandler
 216              		.thumb
 217              		.thumb_func
 219              	TIM4_IRQHandler:
ARM GAS  /tmp/ccJG0Gnm.s 			page 8


 220              	.LFB78:
 200:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */
 201:Src/stm32f1xx_it.c **** 
 202:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel6_IRQn 1 */
 203:Src/stm32f1xx_it.c **** }
 204:Src/stm32f1xx_it.c **** 
 205:Src/stm32f1xx_it.c **** /**
 206:Src/stm32f1xx_it.c **** * @brief This function handles TIM4 global interrupt.
 207:Src/stm32f1xx_it.c **** */
 208:Src/stm32f1xx_it.c **** void TIM4_IRQHandler(void)
 209:Src/stm32f1xx_it.c **** {
 221              		.loc 1 209 0
 222              		.cfi_startproc
 223              		@ args = 0, pretend = 0, frame = 0
 224              		@ frame_needed = 0, uses_anonymous_args = 0
 225 0000 08B5     		push	{r3, lr}
 226              	.LCFI3:
 227              		.cfi_def_cfa_offset 8
 228              		.cfi_offset 3, -8
 229              		.cfi_offset 14, -4
 210:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM4_IRQn 0 */
 211:Src/stm32f1xx_it.c **** 
 212:Src/stm32f1xx_it.c ****   /* USER CODE END TIM4_IRQn 0 */
 213:Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim4);
 230              		.loc 1 213 0
 231 0002 0248     		ldr	r0, .L23
 232 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 233              	.LVL3:
 234 0008 08BD     		pop	{r3, pc}
 235              	.L24:
 236 000a 00BF     		.align	2
 237              	.L23:
 238 000c 00000000 		.word	htim4
 239              		.cfi_endproc
 240              	.LFE78:
 242              		.section	.text.USART1_IRQHandler,"ax",%progbits
 243              		.align	2
 244              		.global	USART1_IRQHandler
 245              		.thumb
 246              		.thumb_func
 248              	USART1_IRQHandler:
 249              	.LFB79:
 214:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM4_IRQn 1 */
 215:Src/stm32f1xx_it.c **** 
 216:Src/stm32f1xx_it.c ****   /* USER CODE END TIM4_IRQn 1 */
 217:Src/stm32f1xx_it.c **** }
 218:Src/stm32f1xx_it.c **** 
 219:Src/stm32f1xx_it.c **** /**
 220:Src/stm32f1xx_it.c **** * @brief This function handles USART1 global interrupt.
 221:Src/stm32f1xx_it.c **** */
 222:Src/stm32f1xx_it.c **** void USART1_IRQHandler(void)
 223:Src/stm32f1xx_it.c **** {
 250              		.loc 1 223 0
 251              		.cfi_startproc
 252              		@ args = 0, pretend = 0, frame = 8
 253              		@ frame_needed = 0, uses_anonymous_args = 0
 254 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccJG0Gnm.s 			page 9


 255              	.LCFI4:
 256              		.cfi_def_cfa_offset 8
 257              		.cfi_offset 4, -8
 258              		.cfi_offset 14, -4
 259 0002 82B0     		sub	sp, sp, #8
 260              	.LCFI5:
 261              		.cfi_def_cfa_offset 16
 224:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 0 */
 225:Src/stm32f1xx_it.c **** 
 226:Src/stm32f1xx_it.c ****   /* USER CODE END USART1_IRQn 0 */
 227:Src/stm32f1xx_it.c ****   HAL_UART_IRQHandler(&huart1);
 262              		.loc 1 227 0
 263 0004 104C     		ldr	r4, .L28
 264 0006 2046     		mov	r0, r4
 265 0008 FFF7FEFF 		bl	HAL_UART_IRQHandler
 266              	.LVL4:
 228:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 1 */
 229:Src/stm32f1xx_it.c ****  uint32_t temp;
 230:Src/stm32f1xx_it.c ****   /*        如果是串口1中断        */
 231:Src/stm32f1xx_it.c ****   if(USART1 == huart1.Instance)
 267              		.loc 1 231 0
 268 000c 2368     		ldr	r3, [r4]
 269 000e 0F4A     		ldr	r2, .L28+4
 270 0010 9342     		cmp	r3, r2
 271 0012 16D1     		bne	.L25
 232:Src/stm32f1xx_it.c ****   {        /* 如果是串口1IDLE中断        */
 233:Src/stm32f1xx_it.c ****     if(RESET != __HAL_UART_GET_FLAG(&huart1,UART_FLAG_IDLE))
 272              		.loc 1 233 0
 273 0014 1A68     		ldr	r2, [r3]
 274 0016 12F0100F 		tst	r2, #16
 275 001a 12D0     		beq	.L25
 276              	.LBB2:
 234:Src/stm32f1xx_it.c ****     {
 235:Src/stm32f1xx_it.c ****       /*        清除中断标志        */
 236:Src/stm32f1xx_it.c ****       __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 277              		.loc 1 236 0
 278 001c 0022     		movs	r2, #0
 279 001e 0192     		str	r2, [sp, #4]
 280 0020 1A68     		ldr	r2, [r3]
 281 0022 0192     		str	r2, [sp, #4]
 282 0024 5B68     		ldr	r3, [r3, #4]
 283 0026 0193     		str	r3, [sp, #4]
 284 0028 019B     		ldr	r3, [sp, #4]
 285              	.LBE2:
 237:Src/stm32f1xx_it.c ****       /*        停止DMA接收        */
 238:Src/stm32f1xx_it.c ****       HAL_UART_DMAStop(&huart1);
 286              		.loc 1 238 0
 287 002a 2046     		mov	r0, r4
 288 002c FFF7FEFF 		bl	HAL_UART_DMAStop
 289              	.LVL5:
 239:Src/stm32f1xx_it.c ****       /*        获取DMA当前还有多少未填充        */
 240:Src/stm32f1xx_it.c ****       temp  = __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 290              		.loc 1 240 0
 291 0030 074B     		ldr	r3, .L28+8
 292 0032 1B68     		ldr	r3, [r3]
 293 0034 5B68     		ldr	r3, [r3, #4]
 294              	.LVL6:
ARM GAS  /tmp/ccJG0Gnm.s 			page 10


 241:Src/stm32f1xx_it.c ****       /*        计算串口接收到的数据个数        */
 242:Src/stm32f1xx_it.c ****       Rx_len_uart1 =  BUFFERSIZE - temp;
 295              		.loc 1 242 0
 296 0036 DB43     		mvns	r3, r3
 297              	.LVL7:
 298 0038 064A     		ldr	r2, .L28+12
 299 003a 1370     		strb	r3, [r2]
 243:Src/stm32f1xx_it.c ****       recv_end_flag_uart1 = 1;
 300              		.loc 1 243 0
 301 003c 0122     		movs	r2, #1
 302 003e 064B     		ldr	r3, .L28+16
 303              	.LVL8:
 304 0040 1A70     		strb	r2, [r3]
 305              	.L25:
 244:Src/stm32f1xx_it.c ****     }
 245:Src/stm32f1xx_it.c ****   }
 246:Src/stm32f1xx_it.c ****   /* USER CODE END USART1_IRQn 1 */
 247:Src/stm32f1xx_it.c **** }
 306              		.loc 1 247 0
 307 0042 02B0     		add	sp, sp, #8
 308              	.LCFI6:
 309              		.cfi_def_cfa_offset 8
 310              		@ sp needed
 311 0044 10BD     		pop	{r4, pc}
 312              	.L29:
 313 0046 00BF     		.align	2
 314              	.L28:
 315 0048 00000000 		.word	huart1
 316 004c 00380140 		.word	1073821696
 317 0050 00000000 		.word	hdma_usart1_rx
 318 0054 00000000 		.word	Rx_len_uart1
 319 0058 00000000 		.word	recv_end_flag_uart1
 320              		.cfi_endproc
 321              	.LFE79:
 323              		.section	.text.USART2_IRQHandler,"ax",%progbits
 324              		.align	2
 325              		.global	USART2_IRQHandler
 326              		.thumb
 327              		.thumb_func
 329              	USART2_IRQHandler:
 330              	.LFB80:
 248:Src/stm32f1xx_it.c **** 
 249:Src/stm32f1xx_it.c **** /**
 250:Src/stm32f1xx_it.c **** * @brief This function handles USART2 global interrupt.
 251:Src/stm32f1xx_it.c **** */
 252:Src/stm32f1xx_it.c **** void USART2_IRQHandler(void)
 253:Src/stm32f1xx_it.c **** {
 331              		.loc 1 253 0
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 8
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 335 0000 10B5     		push	{r4, lr}
 336              	.LCFI7:
 337              		.cfi_def_cfa_offset 8
 338              		.cfi_offset 4, -8
 339              		.cfi_offset 14, -4
 340 0002 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/ccJG0Gnm.s 			page 11


 341              	.LCFI8:
 342              		.cfi_def_cfa_offset 16
 254:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 0 */
 255:Src/stm32f1xx_it.c **** 
 256:Src/stm32f1xx_it.c ****   /* USER CODE END USART2_IRQn 0 */
 257:Src/stm32f1xx_it.c ****   HAL_UART_IRQHandler(&huart2);
 343              		.loc 1 257 0
 344 0004 104C     		ldr	r4, .L33
 345 0006 2046     		mov	r0, r4
 346 0008 FFF7FEFF 		bl	HAL_UART_IRQHandler
 347              	.LVL9:
 258:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 1 */
 259:Src/stm32f1xx_it.c ****  uint32_t temp;
 260:Src/stm32f1xx_it.c ****   /*        如果是串口2中断        */
 261:Src/stm32f1xx_it.c ****   if(USART2 == huart2.Instance)
 348              		.loc 1 261 0
 349 000c 2368     		ldr	r3, [r4]
 350 000e 0F4A     		ldr	r2, .L33+4
 351 0010 9342     		cmp	r3, r2
 352 0012 16D1     		bne	.L30
 262:Src/stm32f1xx_it.c ****   {        /* 如果是串口2IDLE中断        */
 263:Src/stm32f1xx_it.c ****     if(RESET != __HAL_UART_GET_FLAG(&huart2,UART_FLAG_IDLE))
 353              		.loc 1 263 0
 354 0014 1A68     		ldr	r2, [r3]
 355 0016 12F0100F 		tst	r2, #16
 356 001a 12D0     		beq	.L30
 357              	.LBB3:
 264:Src/stm32f1xx_it.c ****     {
 265:Src/stm32f1xx_it.c ****       /*        清除中断标志        */
 266:Src/stm32f1xx_it.c ****       __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 358              		.loc 1 266 0
 359 001c 0022     		movs	r2, #0
 360 001e 0192     		str	r2, [sp, #4]
 361 0020 1A68     		ldr	r2, [r3]
 362 0022 0192     		str	r2, [sp, #4]
 363 0024 5B68     		ldr	r3, [r3, #4]
 364 0026 0193     		str	r3, [sp, #4]
 365 0028 019B     		ldr	r3, [sp, #4]
 366              	.LBE3:
 267:Src/stm32f1xx_it.c ****       /*        停止DMA接收        */
 268:Src/stm32f1xx_it.c ****       HAL_UART_DMAStop(&huart2);
 367              		.loc 1 268 0
 368 002a 2046     		mov	r0, r4
 369 002c FFF7FEFF 		bl	HAL_UART_DMAStop
 370              	.LVL10:
 269:Src/stm32f1xx_it.c ****       /*        获取DMA当前还有多少未填充        */
 270:Src/stm32f1xx_it.c ****       temp  = __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 371              		.loc 1 270 0
 372 0030 074B     		ldr	r3, .L33+8
 373 0032 1B68     		ldr	r3, [r3]
 374 0034 5B68     		ldr	r3, [r3, #4]
 375              	.LVL11:
 271:Src/stm32f1xx_it.c ****       /*        计算串口接收到的数据个数        */
 272:Src/stm32f1xx_it.c ****       Rx_len =  BUFFERSIZE - temp;
 376              		.loc 1 272 0
 377 0036 DB43     		mvns	r3, r3
 378              	.LVL12:
ARM GAS  /tmp/ccJG0Gnm.s 			page 12


 379 0038 064A     		ldr	r2, .L33+12
 380 003a 1370     		strb	r3, [r2]
 273:Src/stm32f1xx_it.c ****       recv_end_flag = 1;
 381              		.loc 1 273 0
 382 003c 0122     		movs	r2, #1
 383 003e 064B     		ldr	r3, .L33+16
 384              	.LVL13:
 385 0040 1A70     		strb	r2, [r3]
 386              	.L30:
 274:Src/stm32f1xx_it.c ****     }
 275:Src/stm32f1xx_it.c ****   }
 276:Src/stm32f1xx_it.c **** 
 277:Src/stm32f1xx_it.c **** 
 278:Src/stm32f1xx_it.c ****   /* USER CODE END USART2_IRQn 1 */
 279:Src/stm32f1xx_it.c **** }
 387              		.loc 1 279 0
 388 0042 02B0     		add	sp, sp, #8
 389              	.LCFI9:
 390              		.cfi_def_cfa_offset 8
 391              		@ sp needed
 392 0044 10BD     		pop	{r4, pc}
 393              	.L34:
 394 0046 00BF     		.align	2
 395              	.L33:
 396 0048 00000000 		.word	huart2
 397 004c 00440040 		.word	1073759232
 398 0050 00000000 		.word	hdma_usart2_rx
 399 0054 00000000 		.word	Rx_len
 400 0058 00000000 		.word	recv_end_flag
 401              		.cfi_endproc
 402              	.LFE80:
 404              		.section	.text.USART3_IRQHandler,"ax",%progbits
 405              		.align	2
 406              		.global	USART3_IRQHandler
 407              		.thumb
 408              		.thumb_func
 410              	USART3_IRQHandler:
 411              	.LFB81:
 280:Src/stm32f1xx_it.c **** 
 281:Src/stm32f1xx_it.c **** /**
 282:Src/stm32f1xx_it.c **** * @brief This function handles USART3 global interrupt.
 283:Src/stm32f1xx_it.c **** */
 284:Src/stm32f1xx_it.c **** void USART3_IRQHandler(void)
 285:Src/stm32f1xx_it.c **** {
 412              		.loc 1 285 0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 0
 415              		@ frame_needed = 0, uses_anonymous_args = 0
 416 0000 08B5     		push	{r3, lr}
 417              	.LCFI10:
 418              		.cfi_def_cfa_offset 8
 419              		.cfi_offset 3, -8
 420              		.cfi_offset 14, -4
 286:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART3_IRQn 0 */
 287:Src/stm32f1xx_it.c **** 
 288:Src/stm32f1xx_it.c ****   /* USER CODE END USART3_IRQn 0 */
 289:Src/stm32f1xx_it.c ****   HAL_UART_IRQHandler(&huart3);
ARM GAS  /tmp/ccJG0Gnm.s 			page 13


 421              		.loc 1 289 0
 422 0002 0248     		ldr	r0, .L37
 423 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 424              	.LVL14:
 425 0008 08BD     		pop	{r3, pc}
 426              	.L38:
 427 000a 00BF     		.align	2
 428              	.L37:
 429 000c 00000000 		.word	huart3
 430              		.cfi_endproc
 431              	.LFE81:
 433              		.text
 434              	.Letext0:
 435              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 436              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 437              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 438              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 439              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 440              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 441              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 442              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 443              		.file 10 "Drivers/CMSIS/Include/core_cm3.h"
 444              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
ARM GAS  /tmp/ccJG0Gnm.s 			page 14


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f1xx_it.c
     /tmp/ccJG0Gnm.s:20     .text.NMI_Handler:00000000 $t
     /tmp/ccJG0Gnm.s:25     .text.NMI_Handler:00000000 NMI_Handler
     /tmp/ccJG0Gnm.s:38     .text.HardFault_Handler:00000000 $t
     /tmp/ccJG0Gnm.s:43     .text.HardFault_Handler:00000000 HardFault_Handler
     /tmp/ccJG0Gnm.s:57     .text.MemManage_Handler:00000000 $t
     /tmp/ccJG0Gnm.s:62     .text.MemManage_Handler:00000000 MemManage_Handler
     /tmp/ccJG0Gnm.s:76     .text.BusFault_Handler:00000000 $t
     /tmp/ccJG0Gnm.s:81     .text.BusFault_Handler:00000000 BusFault_Handler
     /tmp/ccJG0Gnm.s:95     .text.UsageFault_Handler:00000000 $t
     /tmp/ccJG0Gnm.s:100    .text.UsageFault_Handler:00000000 UsageFault_Handler
     /tmp/ccJG0Gnm.s:114    .text.DebugMon_Handler:00000000 $t
     /tmp/ccJG0Gnm.s:119    .text.DebugMon_Handler:00000000 DebugMon_Handler
     /tmp/ccJG0Gnm.s:131    .text.SysTick_Handler:00000000 $t
     /tmp/ccJG0Gnm.s:136    .text.SysTick_Handler:00000000 SysTick_Handler
     /tmp/ccJG0Gnm.s:156    .text.DMA1_Channel5_IRQHandler:00000000 $t
     /tmp/ccJG0Gnm.s:161    .text.DMA1_Channel5_IRQHandler:00000000 DMA1_Channel5_IRQHandler
     /tmp/ccJG0Gnm.s:180    .text.DMA1_Channel5_IRQHandler:0000000c $d
     /tmp/ccJG0Gnm.s:185    .text.DMA1_Channel6_IRQHandler:00000000 $t
     /tmp/ccJG0Gnm.s:190    .text.DMA1_Channel6_IRQHandler:00000000 DMA1_Channel6_IRQHandler
     /tmp/ccJG0Gnm.s:209    .text.DMA1_Channel6_IRQHandler:0000000c $d
     /tmp/ccJG0Gnm.s:214    .text.TIM4_IRQHandler:00000000 $t
     /tmp/ccJG0Gnm.s:219    .text.TIM4_IRQHandler:00000000 TIM4_IRQHandler
     /tmp/ccJG0Gnm.s:238    .text.TIM4_IRQHandler:0000000c $d
     /tmp/ccJG0Gnm.s:243    .text.USART1_IRQHandler:00000000 $t
     /tmp/ccJG0Gnm.s:248    .text.USART1_IRQHandler:00000000 USART1_IRQHandler
     /tmp/ccJG0Gnm.s:315    .text.USART1_IRQHandler:00000048 $d
     /tmp/ccJG0Gnm.s:324    .text.USART2_IRQHandler:00000000 $t
     /tmp/ccJG0Gnm.s:329    .text.USART2_IRQHandler:00000000 USART2_IRQHandler
     /tmp/ccJG0Gnm.s:396    .text.USART2_IRQHandler:00000048 $d
     /tmp/ccJG0Gnm.s:405    .text.USART3_IRQHandler:00000000 $t
     /tmp/ccJG0Gnm.s:410    .text.USART3_IRQHandler:00000000 USART3_IRQHandler
     /tmp/ccJG0Gnm.s:429    .text.USART3_IRQHandler:0000000c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
osSystickHandler
HAL_DMA_IRQHandler
hdma_usart1_rx
hdma_usart2_rx
HAL_TIM_IRQHandler
htim4
HAL_UART_IRQHandler
HAL_UART_DMAStop
huart1
Rx_len_uart1
recv_end_flag_uart1
huart2
Rx_len
recv_end_flag
huart3
