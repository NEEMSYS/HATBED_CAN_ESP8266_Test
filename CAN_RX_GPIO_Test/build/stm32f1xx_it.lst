ARM GAS  /tmp/ccF38FoN.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"stm32f1xx_it.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.NMI_Handler,"ax",%progbits
  20              		.align	2
  21              		.global	NMI_Handler
  22              		.thumb
  23              		.thumb_func
  25              	NMI_Handler:
  26              	.LFB69:
  27              		.file 1 "Src/stm32f1xx_it.c"
   1:Src/stm32f1xx_it.c **** /**
   2:Src/stm32f1xx_it.c ****   ******************************************************************************
   3:Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   4:Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   5:Src/stm32f1xx_it.c ****   ******************************************************************************
   6:Src/stm32f1xx_it.c ****   *
   7:Src/stm32f1xx_it.c ****   * COPYRIGHT(c) 2020 STMicroelectronics
   8:Src/stm32f1xx_it.c ****   *
   9:Src/stm32f1xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  10:Src/stm32f1xx_it.c ****   * are permitted provided that the following conditions are met:
  11:Src/stm32f1xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  12:Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer.
  13:Src/stm32f1xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  14:Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  15:Src/stm32f1xx_it.c ****   *      and/or other materials provided with the distribution.
  16:Src/stm32f1xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  17:Src/stm32f1xx_it.c ****   *      may be used to endorse or promote products derived from this software
  18:Src/stm32f1xx_it.c ****   *      without specific prior written permission.
  19:Src/stm32f1xx_it.c ****   *
  20:Src/stm32f1xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:Src/stm32f1xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:Src/stm32f1xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:Src/stm32f1xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  24:Src/stm32f1xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  25:Src/stm32f1xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  26:Src/stm32f1xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  27:Src/stm32f1xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  28:Src/stm32f1xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  29:Src/stm32f1xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:Src/stm32f1xx_it.c ****   *
  31:Src/stm32f1xx_it.c ****   ******************************************************************************
ARM GAS  /tmp/ccF38FoN.s 			page 2


  32:Src/stm32f1xx_it.c ****   */
  33:Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
  34:Src/stm32f1xx_it.c **** #include "stm32f1xx_hal.h"
  35:Src/stm32f1xx_it.c **** #include "stm32f1xx.h"
  36:Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  37:Src/stm32f1xx_it.c **** #include "cmsis_os.h"
  38:Src/stm32f1xx_it.c **** 
  39:Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  40:Src/stm32f1xx_it.c **** 
  41:Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  42:Src/stm32f1xx_it.c **** 
  43:Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  44:Src/stm32f1xx_it.c **** extern CanRxMsgTypeDef RxMessage;
  45:Src/stm32f1xx_it.c **** 
  46:Src/stm32f1xx_it.c **** extern flag;
  47:Src/stm32f1xx_it.c **** 
  48:Src/stm32f1xx_it.c **** extern CAN_HandleTypeDef hcan;
  49:Src/stm32f1xx_it.c **** 
  50:Src/stm32f1xx_it.c **** extern UART_HandleTypeDef huart2;
  51:Src/stm32f1xx_it.c **** 
  52:Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim4;
  53:Src/stm32f1xx_it.c **** 
  54:Src/stm32f1xx_it.c **** /******************************************************************************/
  55:Src/stm32f1xx_it.c **** /*            Cortex-M3 Processor Interruption and Exception Handlers         */ 
  56:Src/stm32f1xx_it.c **** /******************************************************************************/
  57:Src/stm32f1xx_it.c **** 
  58:Src/stm32f1xx_it.c **** /**
  59:Src/stm32f1xx_it.c **** * @brief This function handles Non maskable interrupt.
  60:Src/stm32f1xx_it.c **** */
  61:Src/stm32f1xx_it.c **** void NMI_Handler(void)
  62:Src/stm32f1xx_it.c **** {
  28              		.loc 1 62 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE69:
  37 0002 00BF     		.section	.text.HardFault_Handler,"ax",%progbits
  38              		.align	2
  39              		.global	HardFault_Handler
  40              		.thumb
  41              		.thumb_func
  43              	HardFault_Handler:
  44              	.LFB70:
  63:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  64:Src/stm32f1xx_it.c **** 
  65:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  66:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  67:Src/stm32f1xx_it.c **** 
  68:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  69:Src/stm32f1xx_it.c **** }
  70:Src/stm32f1xx_it.c **** 
  71:Src/stm32f1xx_it.c **** /**
  72:Src/stm32f1xx_it.c **** * @brief This function handles Hard fault interrupt.
  73:Src/stm32f1xx_it.c **** */
ARM GAS  /tmp/ccF38FoN.s 			page 3


  74:Src/stm32f1xx_it.c **** void HardFault_Handler(void)
  75:Src/stm32f1xx_it.c **** {
  45              		.loc 1 75 0
  46              		.cfi_startproc
  47              		@ Volatile: function does not return.
  48              		@ args = 0, pretend = 0, frame = 0
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50              		@ link register save eliminated.
  51              	.L3:
  52 0000 FEE7     		b	.L3
  53              		.cfi_endproc
  54              	.LFE70:
  56 0002 00BF     		.section	.text.MemManage_Handler,"ax",%progbits
  57              		.align	2
  58              		.global	MemManage_Handler
  59              		.thumb
  60              		.thumb_func
  62              	MemManage_Handler:
  63              	.LFB71:
  76:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  77:Src/stm32f1xx_it.c **** 
  78:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  79:Src/stm32f1xx_it.c ****   while (1)
  80:Src/stm32f1xx_it.c ****   {
  81:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  82:Src/stm32f1xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  83:Src/stm32f1xx_it.c ****   }
  84:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 1 */
  85:Src/stm32f1xx_it.c **** 
  86:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 1 */
  87:Src/stm32f1xx_it.c **** }
  88:Src/stm32f1xx_it.c **** 
  89:Src/stm32f1xx_it.c **** /**
  90:Src/stm32f1xx_it.c **** * @brief This function handles Memory management fault.
  91:Src/stm32f1xx_it.c **** */
  92:Src/stm32f1xx_it.c **** void MemManage_Handler(void)
  93:Src/stm32f1xx_it.c **** {
  64              		.loc 1 93 0
  65              		.cfi_startproc
  66              		@ Volatile: function does not return.
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69              		@ link register save eliminated.
  70              	.L5:
  71 0000 FEE7     		b	.L5
  72              		.cfi_endproc
  73              	.LFE71:
  75 0002 00BF     		.section	.text.BusFault_Handler,"ax",%progbits
  76              		.align	2
  77              		.global	BusFault_Handler
  78              		.thumb
  79              		.thumb_func
  81              	BusFault_Handler:
  82              	.LFB72:
  94:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  95:Src/stm32f1xx_it.c **** 
  96:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
ARM GAS  /tmp/ccF38FoN.s 			page 4


  97:Src/stm32f1xx_it.c ****   while (1)
  98:Src/stm32f1xx_it.c ****   {
  99:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 100:Src/stm32f1xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 101:Src/stm32f1xx_it.c ****   }
 102:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 1 */
 103:Src/stm32f1xx_it.c **** 
 104:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 1 */
 105:Src/stm32f1xx_it.c **** }
 106:Src/stm32f1xx_it.c **** 
 107:Src/stm32f1xx_it.c **** /**
 108:Src/stm32f1xx_it.c **** * @brief This function handles Prefetch fault, memory access fault.
 109:Src/stm32f1xx_it.c **** */
 110:Src/stm32f1xx_it.c **** void BusFault_Handler(void)
 111:Src/stm32f1xx_it.c **** {
  83              		.loc 1 111 0
  84              		.cfi_startproc
  85              		@ Volatile: function does not return.
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              		@ link register save eliminated.
  89              	.L7:
  90 0000 FEE7     		b	.L7
  91              		.cfi_endproc
  92              	.LFE72:
  94 0002 00BF     		.section	.text.UsageFault_Handler,"ax",%progbits
  95              		.align	2
  96              		.global	UsageFault_Handler
  97              		.thumb
  98              		.thumb_func
 100              	UsageFault_Handler:
 101              	.LFB73:
 112:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 113:Src/stm32f1xx_it.c **** 
 114:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 115:Src/stm32f1xx_it.c ****   while (1)
 116:Src/stm32f1xx_it.c ****   {
 117:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 118:Src/stm32f1xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 119:Src/stm32f1xx_it.c ****   }
 120:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 1 */
 121:Src/stm32f1xx_it.c **** 
 122:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 1 */
 123:Src/stm32f1xx_it.c **** }
 124:Src/stm32f1xx_it.c **** 
 125:Src/stm32f1xx_it.c **** /**
 126:Src/stm32f1xx_it.c **** * @brief This function handles Undefined instruction or illegal state.
 127:Src/stm32f1xx_it.c **** */
 128:Src/stm32f1xx_it.c **** void UsageFault_Handler(void)
 129:Src/stm32f1xx_it.c **** {
 102              		.loc 1 129 0
 103              		.cfi_startproc
 104              		@ Volatile: function does not return.
 105              		@ args = 0, pretend = 0, frame = 0
 106              		@ frame_needed = 0, uses_anonymous_args = 0
 107              		@ link register save eliminated.
 108              	.L9:
ARM GAS  /tmp/ccF38FoN.s 			page 5


 109 0000 FEE7     		b	.L9
 110              		.cfi_endproc
 111              	.LFE73:
 113 0002 00BF     		.section	.text.DebugMon_Handler,"ax",%progbits
 114              		.align	2
 115              		.global	DebugMon_Handler
 116              		.thumb
 117              		.thumb_func
 119              	DebugMon_Handler:
 120              	.LFB74:
 130:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 131:Src/stm32f1xx_it.c **** 
 132:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 133:Src/stm32f1xx_it.c ****   while (1)
 134:Src/stm32f1xx_it.c ****   {
 135:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 136:Src/stm32f1xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 137:Src/stm32f1xx_it.c ****   }
 138:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 1 */
 139:Src/stm32f1xx_it.c **** 
 140:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 1 */
 141:Src/stm32f1xx_it.c **** }
 142:Src/stm32f1xx_it.c **** 
 143:Src/stm32f1xx_it.c **** /**
 144:Src/stm32f1xx_it.c **** * @brief This function handles Debug monitor.
 145:Src/stm32f1xx_it.c **** */
 146:Src/stm32f1xx_it.c **** void DebugMon_Handler(void)
 147:Src/stm32f1xx_it.c **** {
 121              		.loc 1 147 0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 0, uses_anonymous_args = 0
 125              		@ link register save eliminated.
 126 0000 7047     		bx	lr
 127              		.cfi_endproc
 128              	.LFE74:
 130 0002 00BF     		.section	.text.SysTick_Handler,"ax",%progbits
 131              		.align	2
 132              		.global	SysTick_Handler
 133              		.thumb
 134              		.thumb_func
 136              	SysTick_Handler:
 137              	.LFB75:
 148:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 149:Src/stm32f1xx_it.c **** 
 150:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 151:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 152:Src/stm32f1xx_it.c **** 
 153:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 154:Src/stm32f1xx_it.c **** }
 155:Src/stm32f1xx_it.c **** 
 156:Src/stm32f1xx_it.c **** /**
 157:Src/stm32f1xx_it.c **** * @brief This function handles System tick timer.
 158:Src/stm32f1xx_it.c **** */
 159:Src/stm32f1xx_it.c **** void SysTick_Handler(void)
 160:Src/stm32f1xx_it.c **** {
 138              		.loc 1 160 0
ARM GAS  /tmp/ccF38FoN.s 			page 6


 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142              		.loc 1 160 0
 143 0000 08B5     		push	{r3, lr}
 144              	.LCFI0:
 145              		.cfi_def_cfa_offset 8
 146              		.cfi_offset 3, -8
 147              		.cfi_offset 14, -4
 161:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 162:Src/stm32f1xx_it.c **** 
 163:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 164:Src/stm32f1xx_it.c ****   osSystickHandler();
 148              		.loc 1 164 0
 149 0002 FFF7FEFF 		bl	osSystickHandler
 150              	.LVL0:
 151 0006 08BD     		pop	{r3, pc}
 152              		.cfi_endproc
 153              	.LFE75:
 155              		.section	.text.USB_LP_CAN1_RX0_IRQHandler,"ax",%progbits
 156              		.align	2
 157              		.global	USB_LP_CAN1_RX0_IRQHandler
 158              		.thumb
 159              		.thumb_func
 161              	USB_LP_CAN1_RX0_IRQHandler:
 162              	.LFB76:
 165:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 166:Src/stm32f1xx_it.c **** 
 167:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 168:Src/stm32f1xx_it.c **** }
 169:Src/stm32f1xx_it.c **** 
 170:Src/stm32f1xx_it.c **** /******************************************************************************/
 171:Src/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 172:Src/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 173:Src/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 174:Src/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 175:Src/stm32f1xx_it.c **** /******************************************************************************/
 176:Src/stm32f1xx_it.c **** 
 177:Src/stm32f1xx_it.c **** /**
 178:Src/stm32f1xx_it.c **** * @brief This function handles USB low priority or CAN RX0 interrupts.
 179:Src/stm32f1xx_it.c **** */
 180:Src/stm32f1xx_it.c **** void USB_LP_CAN1_RX0_IRQHandler(void)
 181:Src/stm32f1xx_it.c **** {
 163              		.loc 1 181 0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167 0000 08B5     		push	{r3, lr}
 168              	.LCFI1:
 169              		.cfi_def_cfa_offset 8
 170              		.cfi_offset 3, -8
 171              		.cfi_offset 14, -4
 182:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
 183:Src/stm32f1xx_it.c **** 
 184:Src/stm32f1xx_it.c ****   /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
 185:Src/stm32f1xx_it.c ****   HAL_CAN_IRQHandler(&hcan);
 172              		.loc 1 185 0
ARM GAS  /tmp/ccF38FoN.s 			page 7


 173 0002 0648     		ldr	r0, .L16
 174 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 175              	.LVL1:
 186:Src/stm32f1xx_it.c **** 
 187:Src/stm32f1xx_it.c ****   if (RxMessage.ExtId == 0x1314)
 176              		.loc 1 187 0
 177 0008 054B     		ldr	r3, .L16+4
 178 000a 5A68     		ldr	r2, [r3, #4]
 179 000c 41F21433 		movw	r3, #4884
 180 0010 9A42     		cmp	r2, r3
 181 0012 02D1     		bne	.L13
 188:Src/stm32f1xx_it.c ****   {
 189:Src/stm32f1xx_it.c ****     flag = 1;
 182              		.loc 1 189 0
 183 0014 0122     		movs	r2, #1
 184 0016 034B     		ldr	r3, .L16+8
 185 0018 1A60     		str	r2, [r3]
 186              	.L13:
 187 001a 08BD     		pop	{r3, pc}
 188              	.L17:
 189              		.align	2
 190              	.L16:
 191 001c 00000000 		.word	hcan
 192 0020 00000000 		.word	RxMessage
 193 0024 00000000 		.word	flag
 194              		.cfi_endproc
 195              	.LFE76:
 197              		.section	.text.TIM4_IRQHandler,"ax",%progbits
 198              		.align	2
 199              		.global	TIM4_IRQHandler
 200              		.thumb
 201              		.thumb_func
 203              	TIM4_IRQHandler:
 204              	.LFB77:
 190:Src/stm32f1xx_it.c ****   }
 191:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
 192:Src/stm32f1xx_it.c **** 
 193:Src/stm32f1xx_it.c ****   /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
 194:Src/stm32f1xx_it.c **** }
 195:Src/stm32f1xx_it.c **** 
 196:Src/stm32f1xx_it.c **** /**
 197:Src/stm32f1xx_it.c **** * @brief This function handles TIM4 global interrupt.
 198:Src/stm32f1xx_it.c **** */
 199:Src/stm32f1xx_it.c **** void TIM4_IRQHandler(void)
 200:Src/stm32f1xx_it.c **** {
 205              		.loc 1 200 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 0, uses_anonymous_args = 0
 209 0000 08B5     		push	{r3, lr}
 210              	.LCFI2:
 211              		.cfi_def_cfa_offset 8
 212              		.cfi_offset 3, -8
 213              		.cfi_offset 14, -4
 201:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM4_IRQn 0 */
 202:Src/stm32f1xx_it.c **** 
 203:Src/stm32f1xx_it.c ****   /* USER CODE END TIM4_IRQn 0 */
ARM GAS  /tmp/ccF38FoN.s 			page 8


 204:Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim4);
 214              		.loc 1 204 0
 215 0002 0248     		ldr	r0, .L20
 216 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 217              	.LVL2:
 218 0008 08BD     		pop	{r3, pc}
 219              	.L21:
 220 000a 00BF     		.align	2
 221              	.L20:
 222 000c 00000000 		.word	htim4
 223              		.cfi_endproc
 224              	.LFE77:
 226              		.section	.text.USART2_IRQHandler,"ax",%progbits
 227              		.align	2
 228              		.global	USART2_IRQHandler
 229              		.thumb
 230              		.thumb_func
 232              	USART2_IRQHandler:
 233              	.LFB78:
 205:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM4_IRQn 1 */
 206:Src/stm32f1xx_it.c **** 
 207:Src/stm32f1xx_it.c ****   /* USER CODE END TIM4_IRQn 1 */
 208:Src/stm32f1xx_it.c **** }
 209:Src/stm32f1xx_it.c **** 
 210:Src/stm32f1xx_it.c **** /**
 211:Src/stm32f1xx_it.c **** * @brief This function handles USART2 global interrupt.
 212:Src/stm32f1xx_it.c **** */
 213:Src/stm32f1xx_it.c **** void USART2_IRQHandler(void)
 214:Src/stm32f1xx_it.c **** {
 234              		.loc 1 214 0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 0
 237              		@ frame_needed = 0, uses_anonymous_args = 0
 238 0000 08B5     		push	{r3, lr}
 239              	.LCFI3:
 240              		.cfi_def_cfa_offset 8
 241              		.cfi_offset 3, -8
 242              		.cfi_offset 14, -4
 215:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 0 */
 216:Src/stm32f1xx_it.c **** 
 217:Src/stm32f1xx_it.c ****   /* USER CODE END USART2_IRQn 0 */
 218:Src/stm32f1xx_it.c ****   HAL_UART_IRQHandler(&huart2);
 243              		.loc 1 218 0
 244 0002 0248     		ldr	r0, .L24
 245 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 246              	.LVL3:
 247 0008 08BD     		pop	{r3, pc}
 248              	.L25:
 249 000a 00BF     		.align	2
 250              	.L24:
 251 000c 00000000 		.word	huart2
 252              		.cfi_endproc
 253              	.LFE78:
 255              		.text
 256              	.Letext0:
 257              		.file 2 "/home/user/Library/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_ty
 258              		.file 3 "/home/user/Library/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
ARM GAS  /tmp/ccF38FoN.s 			page 9


 259              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 260              		.file 5 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 261              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 262              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 263              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 264              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 265              		.file 10 "Drivers/CMSIS/Include/core_cm3.h"
 266              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
ARM GAS  /tmp/ccF38FoN.s 			page 10


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f1xx_it.c
     /tmp/ccF38FoN.s:20     .text.NMI_Handler:00000000 $t
     /tmp/ccF38FoN.s:25     .text.NMI_Handler:00000000 NMI_Handler
     /tmp/ccF38FoN.s:38     .text.HardFault_Handler:00000000 $t
     /tmp/ccF38FoN.s:43     .text.HardFault_Handler:00000000 HardFault_Handler
     /tmp/ccF38FoN.s:57     .text.MemManage_Handler:00000000 $t
     /tmp/ccF38FoN.s:62     .text.MemManage_Handler:00000000 MemManage_Handler
     /tmp/ccF38FoN.s:76     .text.BusFault_Handler:00000000 $t
     /tmp/ccF38FoN.s:81     .text.BusFault_Handler:00000000 BusFault_Handler
     /tmp/ccF38FoN.s:95     .text.UsageFault_Handler:00000000 $t
     /tmp/ccF38FoN.s:100    .text.UsageFault_Handler:00000000 UsageFault_Handler
     /tmp/ccF38FoN.s:114    .text.DebugMon_Handler:00000000 $t
     /tmp/ccF38FoN.s:119    .text.DebugMon_Handler:00000000 DebugMon_Handler
     /tmp/ccF38FoN.s:131    .text.SysTick_Handler:00000000 $t
     /tmp/ccF38FoN.s:136    .text.SysTick_Handler:00000000 SysTick_Handler
     /tmp/ccF38FoN.s:156    .text.USB_LP_CAN1_RX0_IRQHandler:00000000 $t
     /tmp/ccF38FoN.s:161    .text.USB_LP_CAN1_RX0_IRQHandler:00000000 USB_LP_CAN1_RX0_IRQHandler
     /tmp/ccF38FoN.s:191    .text.USB_LP_CAN1_RX0_IRQHandler:0000001c $d
     /tmp/ccF38FoN.s:198    .text.TIM4_IRQHandler:00000000 $t
     /tmp/ccF38FoN.s:203    .text.TIM4_IRQHandler:00000000 TIM4_IRQHandler
     /tmp/ccF38FoN.s:222    .text.TIM4_IRQHandler:0000000c $d
     /tmp/ccF38FoN.s:227    .text.USART2_IRQHandler:00000000 $t
     /tmp/ccF38FoN.s:232    .text.USART2_IRQHandler:00000000 USART2_IRQHandler
     /tmp/ccF38FoN.s:251    .text.USART2_IRQHandler:0000000c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
osSystickHandler
HAL_CAN_IRQHandler
hcan
RxMessage
flag
HAL_TIM_IRQHandler
htim4
HAL_UART_IRQHandler
huart2
